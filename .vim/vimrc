set autoindent
set autoread
set backspace=indent,eol,start
set backupdir=.,~/.vim/backup
set complete-=i
set directory=~/.vim/swap//
set display=lastline
set formatoptions=tcqj
set history=10000
set hlsearch
set incsearch
set langnoremap
set laststatus=2
set listchars=tab:>\ ,trail:-,nbsp:+
set mouse=a
set nocompatible
"set nrformats=bin,hex
set sessionoptions-=options
set smarttab
set tabpagemax=50
set tags=./tags;,tags
set ttyfast
set undodir=~/.vim/undo
set viminfo+=!
set wildmenu
set clipboard=unnamed
set encoding=utf-8
set fileencodings=utf-8,euc-jp,sjis,cp932,iso-2022-jp
set fileformats=unix,dos,mac

if has('persistent_undo')
    set undodir=~/.vim/undo
    set undofile                                                                                                                                   
endif

"for python
autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType python setl tabstop=8

let g:tex_conceal=''
let fortran_free_source=1
let fortran_fold=1
au! BufRead,BufNewFile *.f90 let b:fortran_do_enddo=1
set shiftwidth=4
set softtabstop=4
set expandtab
set number
syntax on

nnoremap y "+y
nnoremap t o<ESC>
nnoremap == gg=G'''
noremap <S-h>   ^
noremap <S-l>   $
noremap <Esc><Esc> :noh<CR>
inoremap <C-f> <C-x><C-f>
nnoremap <C-h> <C-?>
" 折り返し時に表示行単位での移動できるようにする
nnoremap j gj
nnoremap k gk


call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'tomasr/molokai'
Plug 'cohama/lexima.vim'
Plug 'easymotion/vim-easymotion'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'vim-scripts/vim-auto-save'
Plug 'davidhalter/jedi-vim'
Plug 'lervag/vimtex'
Plug 'tell-k/vim-autopep8'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'Shougo/neocomplete.vim'
Plug 'Shougo/neosnippet'
Plug 'ujihisa/neco-look'
Plug 'rhysd/vim-grammarous'
Plug 'thinca/vim-ref'
Plug 'mfumi/ref-dicts-en'
Plug 'tyru/vim-altercmd'
Plug 'Shougo/neosnippet-snippets'
Plug 'machakann/vim-highlightedundo'
call plug#end()


"vim-highlightedundo
nmap u     <Plug>(highlightedundo-undo)
nmap <C-r> <Plug>(highlightedundo-redo)
nmap U     <Plug>(highlightedundo-Undo)
nmap g-    <Plug>(highlightedundo-gminus)
nmap g+    <Plug>(highlightedundo-gplus)

"英語辞書を引くための設定
" vim-ref のバッファを q で閉じられるようにする
autocmd FileType ref-* nnoremap <buffer> <silent> q :<C-u>close<CR>

" 辞書定義
let g:ref_source_webdict_sites = {
            \   'je': {
            \     'url': 'https://eow.alc.co.jp/search?q=%s',
            \   },
            \   'ej': {
            \     'url': 'https://eow.alc.co.jp/search?q=%s',
            \   },
            \ }

" デフォルトサイト
let g:ref_source_webdict_sites.default = 'ej'

" 出力に対するフィルタ
" 最初の数行を削除
function! g:ref_source_webdict_sites.je.filter(output)
    return join(split(a:output, "\n")[34 :], "\n")
endfunction

function! g:ref_source_webdict_sites.ej.filter(output)
    return join(split(a:output, "\n")[34 :], "\n")
endfunction

call altercmd#load()
CAlterCommand ej Ref webdict ej
CAlterCommand je Ref webdict je
CAlterCommand ee Ref longman 


"neocomplete
"
"neco-look
if !exists('g:neocomplete#text_mode_filetypes')
    let g:neocomplete#text_mode_filetypes = {}
endif
let g:neocomplete#text_mode_filetypes = {
            \ 'rst': 1,
            \ 'markdown': 1,
            \ 'gitrebase': 1,
            \ 'gitcommit': 1,
            \ 'vcs-commit': 1,
            \ 'hybrid': 1,
            \ 'text': 1,
            \ 'help': 1,
            \ 'tex': 1,
            \ }


" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ?"\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ?"\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=i
endif


"neocomplete | vimtex

" 起動時に有効化
let g:neocomplete#enable_at_startup = 1
" 大文字が入力されるまで大文字小文字の区別を無視する
let g:neocomplete#enable_smart_case = 1
" _(アンダースコア)区切りの補完を有効化
let g:neocomplete#enable_underbar_completion = 1
let g:neocomplete#enable_camel_case_completion  =  1
" ポップアップメニューで表示される候補の数
let g:neocomplete#max_list = 20
" シンタックスをキャッシュするときの最小文字長
let g:neocomplete#sources#syntax#min_keyword_length = 3
" 補完を表示する最小文字数
let g:neocomplete#auto_completion_start_length = 2
" preview window を閉じない
let g:neocomplete#enable_auto_close_preview = 0
autocmd InsertLeave * silent! pclose!

if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.tex =
            \ g:vimtex#re#neocomplete


"fzf

let g:fzf_command_prefix = 'Fzf'
nmap F :FzfFiles<CR>

"Automatically install missing plugins on startup
autocmd VimEnter *
            \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
            \|   PlugInstall --sync | q
            \| endif

"vimtex"
let g:vimtex_compiler_latexmk = {
            \ 'background': 1,
            \ 'callback': 0,
            \ 'build_dir': '',
            \ 'continuous': 1,
            \ 'options': [
            \    '-pdfdvi', 
            \    '-verbose',
            \    '-file-line-error',
            \    '-synctex=1',
            \    '-interaction=nonstopmode',
            \],
            \}

let g:vimtex_view_general_viewer
            \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '-r @line @pdf @tex'

"for vim-indent-guides"
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
"for vim-auto-save"
let g:auto_save = 1

colorscheme molokai

"esaymotion config
map <Leader> <Plug>(easymotion-prefix)
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key
" binding.
" " `s{char}{label}`
" " nmap s <Plug>(easymotion-overwin-f)
" " or
" " `s{char}{char}{label}`
" " Need one more keystroke, but on average, it may be more comfortable.
nmap f <Plug>(easymotion-overwin-f2)
"
" " Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
"
" " JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

"autopep8
autocmd FileType python noremap <buffer> <G> :call Autopep8()<CR>
